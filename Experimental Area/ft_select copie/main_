/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: Arno <Arno@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2013/12/16 20:25:00 by adebray           #+#    #+#             */
/*   Updated: 2014/01/08 13:44:58 by Arno             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <ft_select.h>

t_list				*create(void)
{
	t_list			*list;

	list = malloc(sizeof(t_list));
	list->str = NULL;
	list->slc = 0;
	list->len = 0;
	list->x = 0;
	list->y = 0;
	list->next = NULL;
	list->prev = NULL;
	return (list);
}

t_term				*init(void)
{
	t_term			*conf;

	conf = malloc(sizeof(t_term));
	conf->height = tgetnum("li");
	conf->width = tgetnum("co");
	conf->maxlen = -2147483648;
	conf->maxcol = 0;
	conf->clist = 0;
	conf->maxlin = 1;
	return (conf);
}

t_list				*build(int argc, char **argv, t_term *conf)
{
	int				i;
	t_list			*list;
	t_list			*tmp;

	i = 1;
	list = create();
	tmp = list;
	while (i < argc)
	{
		list->str = argv[i];
		list->len = ft_strlen(argv[i]);
		if (list->len > conf->maxlen)
			conf->maxlen = list->len;
		list->y = i - 1;
		conf->clist = i;
		if (i < argc - 1)
		{
			list->next = create();
			list->next->prev = list;
		}
		else
		{
			tmp->prev = list;
			list->next = tmp;
		}
		list = list->next;
		i += 1;
	}
	return (tmp);
}

void				print(t_list *head)
{
	int				i;
	t_list			*list;

	i = 0;
	list = head;
	while (list != head || i == 0)
	{
		ft_printf("list : %p\n", list);
		ft_printf("\tstr : %s\n", list->str);
		ft_printf("\tslc : %d\n", list->slc);
		ft_printf("\tlen : %d\n", list->len);
		ft_printf("\tx : %d\n", list->x);
		ft_printf("\ty : %d\n", list->y);
		ft_printf("\tprev : %p\n", list->prev);
		ft_printf("\tnext : %p\n", list->next);
		list = list->next;
		i += 1;
	}
}

int						tswitch(void)
{
	// char				buffer[2048];
	struct termios		term;

	if (tgetent(0, getenv("TERM")) < 1)
		return (-1);
	tcgetattr(0, &term);
	term.c_lflag &= ICANON;
	term.c_lflag &= ECHO;
	// term.c_lflag &= NOFLSH;
	// term.c_lflag &= ISIG;
	tcsetattr(0, 0, &term);
	return (0);
}

int						so_printed(t_term *conf, t_list *head)
{
	int					i;
	int					j;
	int					recul;
	t_list					*list;

	i = 0;
	j = 0;
	recul = 0;
	list = head;
	while (j < conf->maxlin || list != head)
	{
		tputs(tgoto(tgetstr("cm", NULL), list->x, list->y - recul), 1, ft_putschar);
		if (list->slc != -1)
		{
			if (list->slc == 1)
				tputs(tgetstr("mr", NULL), 1, ft_putschar);
			ft_printf(list->str);
			if (list->slc == 1)
				tputs(tgetstr("me", NULL), 1, ft_putschar);
		}
		else
			recul += 1;
		list = list->next;
		if (list && list->y >= conf->height)
		{
			if (list->y != 0 && list->y % conf->height == 0)
				i += conf->maxlen + 1;
			list->x += i;
			list->y %= conf->height;
		}
		j += 1;
	}
	return (recul);
}

t_term				*drawin_op(t_term *conf)
{
	if (conf->clist > conf->height)
		conf->maxlin += conf->clist / conf->height;
	if (conf->width % (conf->maxlen + 1) == 3)
		conf->maxcol = (conf->width / (conf->maxlen + 1) + 1);
	else
		conf->maxcol = conf->width / (conf->maxlen + 1);
	if (conf->maxlin > conf->maxcol)
	{
		ft_printf("NIQUE");
		return (NULL);
	}
	return (conf);
}

t_list				*is_key(t_list *list, char *read_char)
{
	if (KEY_UP)
		return (list->prev);
	else if (KEY_DW)
		return (list->next);
	else
		return (list);
}

t_list				*is_spc(t_term *conf, t_list *list)
{
	if (list->slc == 0)
		list->slc = 1;
	else
		list->slc = 0;
	so_printed(conf, list);
	return (list->next);
}

t_list					*read_user(t_term *conf, t_list *head)
{
	char				read_char[4] = {0};
	t_list				*list;
	int					recul;

	list = head;
	recul = 0;
	while (read_char[0] != 3 && (read_char[0] != 27 || read_char[1] != 0))
	{
		tputs(tgoto(tgetstr("cm", NULL), list->x, list->y - recul), 1, ft_putschar);
		ft_strclr(read_char);
		read(0, read_char, 3);
		list = is_key(list, read_char);
		if (read_char[0] == 32 && read_char[1] == 0)
			list = is_spc(conf, list);
		else if (read_char[0] == 10 && read_char[1] == 0)
			return (head);
		else if ((read_char[0] == 127 && read_char[1] == 0) || (read_char[0] == 126 && read_char[1] == 0))
		{
			//list->prev->next = list->next;
			//list->next->prev = list->prev;
			list->slc = -1;
			//list = list->next;
			tputs(tgetstr("cl", NULL), 1, ft_putschar);
			recul = so_printed(conf, head);
		}
		// else
		// 	ft_printf("%d.%d.%d.%d\n", read_char[0], read_char[1], read_char[2], read_char[3]);
	}
	return (head);
}

void				print_result(t_term *conf, t_list *head)
{
	int					i;
	int					j;
	t_list				*list;

	i = 1;
	j = 0;
	list = head;
	while (j < conf->clist)
	{
		if (list->slc == 1)
		{
			if (i == 1)
			{
				ft_printf(list->str);
				i -= 1;
			}
			else
			{
				ft_printf(" ");
				ft_printf(list->str);
			}
		}
		list = list->next;
		j += 1;
	}
}

int					main(int argc, char **argv)
{
	t_list			*list;
	t_term			*conf;

	tswitch();

	conf = init();
	list = build(argc, argv, conf);
	conf = drawin_op(conf);
	if (!conf)
		return (-1);


	tputs(tgetstr("ti", NULL), 1, ft_putschar);
	so_printed(conf, list);

	list = read_user(conf, list);

	tputs(tgetstr("te", NULL), 1, ft_putschar);

	print_result(conf, list);
	// print(list);
	return (0);
}
